/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/Model/AttributeObject.h"
#include "ifcpp/Model/BuildingException.h"
#include "ifcpp/Model/BuildingGuid.h"
#include "ifcpp/Reader/ReaderUtil.h"
#include "ifcpp/Writer/WriterUtil.h"
#include "ifcpp/Ifc/IfcAxis2PlacementLinear.h"
#include "ifcpp/Ifc/IfcDirection.h"
#include "ifcpp/Ifc/IfcPoint.h"
#include "ifcpp/Ifc/IfcPresentationLayerAssignment.h"
#include "ifcpp/Ifc/IfcStyledItem.h"

// ENTITY IfcAxis2PlacementLinear 
IFC4X3::IfcAxis2PlacementLinear::IfcAxis2PlacementLinear( int tag ) { m_tag = tag; }
void IFC4X3::IfcAxis2PlacementLinear::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCAXIS2PLACEMENTLINEAR" << "(";
	if( m_Location ) { stream << "#" << m_Location->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Axis ) { stream << "#" << m_Axis->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_RefDirection ) { stream << "#" << m_RefDirection->m_tag; } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcAxis2PlacementLinear::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcAxis2PlacementLinear::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 3 ){ std::stringstream err; err << "Wrong parameter count for entity IfcAxis2PlacementLinear, expecting 3, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	readEntityReference( args[0], m_Location, map, errorStream );
	readEntityReference( args[1], m_Axis, map, errorStream );
	readEntityReference( args[2], m_RefDirection, map, errorStream );
}
void IFC4X3::IfcAxis2PlacementLinear::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcPlacement::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "Axis", m_Axis ) );
	vec_attributes.emplace_back( std::make_pair( "RefDirection", m_RefDirection ) );
}
void IFC4X3::IfcAxis2PlacementLinear::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcPlacement::getAttributesInverse( vec_attributes_inverse );
}
void IFC4X3::IfcAxis2PlacementLinear::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcPlacement::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcAxis2PlacementLinear::unlinkFromInverseCounterparts()
{
	IfcPlacement::unlinkFromInverseCounterparts();
}
