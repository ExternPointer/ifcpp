/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <map>
#include "ifcpp/Model/BasicTypes.h"
#include "ifcpp/Model/BuildingException.h"
#include "ifcpp/Reader/ReaderUtil.h"
#include "ifcpp/Ifc/IfcAmountOfSubstanceMeasure.h"
#include "ifcpp/Ifc/IfcAreaMeasure.h"
#include "ifcpp/Ifc/IfcComplexNumber.h"
#include "ifcpp/Ifc/IfcContextDependentMeasure.h"
#include "ifcpp/Ifc/IfcCountMeasure.h"
#include "ifcpp/Ifc/IfcDescriptiveMeasure.h"
#include "ifcpp/Ifc/IfcElectricCurrentMeasure.h"
#include "ifcpp/Ifc/IfcLengthMeasure.h"
#include "ifcpp/Ifc/IfcLuminousIntensityMeasure.h"
#include "ifcpp/Ifc/IfcMassMeasure.h"
#include "ifcpp/Ifc/IfcNonNegativeLengthMeasure.h"
#include "ifcpp/Ifc/IfcNormalisedRatioMeasure.h"
#include "ifcpp/Ifc/IfcNumericMeasure.h"
#include "ifcpp/Ifc/IfcParameterValue.h"
#include "ifcpp/Ifc/IfcPlaneAngleMeasure.h"
#include "ifcpp/Ifc/IfcPositiveLengthMeasure.h"
#include "ifcpp/Ifc/IfcPositivePlaneAngleMeasure.h"
#include "ifcpp/Ifc/IfcPositiveRatioMeasure.h"
#include "ifcpp/Ifc/IfcRatioMeasure.h"
#include "ifcpp/Ifc/IfcSolidAngleMeasure.h"
#include "ifcpp/Ifc/IfcThermodynamicTemperatureMeasure.h"
#include "ifcpp/Ifc/IfcTimeMeasure.h"
#include "ifcpp/Ifc/IfcVolumeMeasure.h"
#include "ifcpp/Ifc/IfcValue.h"
#include "ifcpp/Ifc/IfcMeasureValue.h"

// TYPE IfcMeasureValue = SELECT	(IfcAmountOfSubstanceMeasure	,IfcAreaMeasure	,IfcComplexNumber	,IfcContextDependentMeasure	,IfcCountMeasure	,IfcDescriptiveMeasure	,IfcElectricCurrentMeasure	,IfcLengthMeasure	,IfcLuminousIntensityMeasure	,IfcMassMeasure	,IfcNonNegativeLengthMeasure	,IfcNormalisedRatioMeasure	,IfcNumericMeasure	,IfcParameterValue	,IfcPlaneAngleMeasure	,IfcPositiveLengthMeasure	,IfcPositivePlaneAngleMeasure	,IfcPositiveRatioMeasure	,IfcRatioMeasure	,IfcSolidAngleMeasure	,IfcThermodynamicTemperatureMeasure	,IfcTimeMeasure	,IfcVolumeMeasure);
shared_ptr<IFC4X3::IfcMeasureValue> IFC4X3::IfcMeasureValue::createObjectFromSTEP( const std::string& arg, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	if( arg.empty() ){ return shared_ptr<IfcMeasureValue>(); }
	if( arg.compare("$")==0 )
	{
		return shared_ptr<IfcMeasureValue>();
	}
	if( arg.compare("*")==0 )
	{
		return shared_ptr<IfcMeasureValue>();
	}
	shared_ptr<IfcMeasureValue> result_object;
	readSelectType( arg, result_object, map, errorStream );
	return result_object;
}
