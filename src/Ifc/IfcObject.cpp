/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/Model/AttributeObject.h"
#include "ifcpp/Model/BuildingException.h"
#include "ifcpp/Model/BuildingGuid.h"
#include "ifcpp/Reader/ReaderUtil.h"
#include "ifcpp/Writer/WriterUtil.h"
#include "ifcpp/Ifc/IfcGloballyUniqueId.h"
#include "ifcpp/Ifc/IfcLabel.h"
#include "ifcpp/Ifc/IfcObject.h"
#include "ifcpp/Ifc/IfcOwnerHistory.h"
#include "ifcpp/Ifc/IfcRelAggregates.h"
#include "ifcpp/Ifc/IfcRelAssigns.h"
#include "ifcpp/Ifc/IfcRelAssociates.h"
#include "ifcpp/Ifc/IfcRelDeclares.h"
#include "ifcpp/Ifc/IfcRelDefinesByObject.h"
#include "ifcpp/Ifc/IfcRelDefinesByProperties.h"
#include "ifcpp/Ifc/IfcRelDefinesByType.h"
#include "ifcpp/Ifc/IfcRelNests.h"
#include "ifcpp/Ifc/IfcText.h"

// ENTITY IfcObject 
IFC4X3::IfcObject::IfcObject( int tag ) { m_tag = tag; }
void IFC4X3::IfcObject::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCOBJECT" << "(";
	if( m_GlobalId ) { m_GlobalId->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_OwnerHistory ) { stream << "#" << m_OwnerHistory->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ObjectType ) { m_ObjectType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcObject::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcObject::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 5 ){ std::stringstream err; err << "Wrong parameter count for entity IfcObject, expecting 5, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_GlobalId = IfcGloballyUniqueId::createObjectFromSTEP( args[0], map, errorStream );
	readEntityReference( args[1], m_OwnerHistory, map, errorStream );
	m_Name = IfcLabel::createObjectFromSTEP( args[2], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[3], map, errorStream );
	m_ObjectType = IfcLabel::createObjectFromSTEP( args[4], map, errorStream );
}
void IFC4X3::IfcObject::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcObjectDefinition::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "ObjectType", m_ObjectType ) );
}
void IFC4X3::IfcObject::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcObjectDefinition::getAttributesInverse( vec_attributes_inverse );
	shared_ptr<AttributeObjectVector> IsDeclaredBy_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_IsDeclaredBy_inverse.size(); ++i )
	{
		if( !m_IsDeclaredBy_inverse[i].expired() )
		{
			IsDeclaredBy_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcRelDefinesByObject>( m_IsDeclaredBy_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "IsDeclaredBy_inverse", IsDeclaredBy_inverse_vec_obj ) );
	shared_ptr<AttributeObjectVector> Declares_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_Declares_inverse.size(); ++i )
	{
		if( !m_Declares_inverse[i].expired() )
		{
			Declares_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcRelDefinesByObject>( m_Declares_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "Declares_inverse", Declares_inverse_vec_obj ) );
	shared_ptr<AttributeObjectVector> IsTypedBy_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_IsTypedBy_inverse.size(); ++i )
	{
		if( !m_IsTypedBy_inverse[i].expired() )
		{
			IsTypedBy_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcRelDefinesByType>( m_IsTypedBy_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "IsTypedBy_inverse", IsTypedBy_inverse_vec_obj ) );
	shared_ptr<AttributeObjectVector> IsDefinedBy_inverse_vec_obj( new AttributeObjectVector() );
	for( size_t i=0; i<m_IsDefinedBy_inverse.size(); ++i )
	{
		if( !m_IsDefinedBy_inverse[i].expired() )
		{
			IsDefinedBy_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcRelDefinesByProperties>( m_IsDefinedBy_inverse[i] ) );
		}
	}
	vec_attributes_inverse.emplace_back( std::make_pair( "IsDefinedBy_inverse", IsDefinedBy_inverse_vec_obj ) );
}
void IFC4X3::IfcObject::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcObjectDefinition::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcObject::unlinkFromInverseCounterparts()
{
	IfcObjectDefinition::unlinkFromInverseCounterparts();
}
