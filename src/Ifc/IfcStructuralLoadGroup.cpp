/* Code generated by IfcQuery EXPRESS generator, www.ifcquery.com */
#include <sstream>
#include <limits>

#include "ifcpp/Model/AttributeObject.h"
#include "ifcpp/Model/BuildingException.h"
#include "ifcpp/Model/BuildingGuid.h"
#include "ifcpp/Reader/ReaderUtil.h"
#include "ifcpp/Writer/WriterUtil.h"
#include "ifcpp/Ifc/IfcActionSourceTypeEnum.h"
#include "ifcpp/Ifc/IfcActionTypeEnum.h"
#include "ifcpp/Ifc/IfcGloballyUniqueId.h"
#include "ifcpp/Ifc/IfcLabel.h"
#include "ifcpp/Ifc/IfcLoadGroupTypeEnum.h"
#include "ifcpp/Ifc/IfcOwnerHistory.h"
#include "ifcpp/Ifc/IfcRatioMeasure.h"
#include "ifcpp/Ifc/IfcRelAggregates.h"
#include "ifcpp/Ifc/IfcRelAssigns.h"
#include "ifcpp/Ifc/IfcRelAssignsToGroup.h"
#include "ifcpp/Ifc/IfcRelAssociates.h"
#include "ifcpp/Ifc/IfcRelDeclares.h"
#include "ifcpp/Ifc/IfcRelDefinesByObject.h"
#include "ifcpp/Ifc/IfcRelDefinesByProperties.h"
#include "ifcpp/Ifc/IfcRelDefinesByType.h"
#include "ifcpp/Ifc/IfcRelNests.h"
#include "ifcpp/Ifc/IfcRelReferencedInSpatialStructure.h"
#include "ifcpp/Ifc/IfcStructuralAnalysisModel.h"
#include "ifcpp/Ifc/IfcStructuralLoadGroup.h"
#include "ifcpp/Ifc/IfcStructuralResultGroup.h"
#include "ifcpp/Ifc/IfcText.h"

// ENTITY IfcStructuralLoadGroup 
IFC4X3::IfcStructuralLoadGroup::IfcStructuralLoadGroup( int tag ) { m_tag = tag; }
void IFC4X3::IfcStructuralLoadGroup::getStepLine( std::stringstream& stream ) const
{
	stream << "#" << m_tag << "= IFCSTRUCTURALLOADGROUP" << "(";
	if( m_GlobalId ) { m_GlobalId->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_OwnerHistory ) { stream << "#" << m_OwnerHistory->m_tag; } else { stream << "$"; }
	stream << ",";
	if( m_Name ) { m_Name->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Description ) { m_Description->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ObjectType ) { m_ObjectType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_PredefinedType ) { m_PredefinedType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ActionType ) { m_ActionType->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_ActionSource ) { m_ActionSource->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Coefficient ) { m_Coefficient->getStepParameter( stream ); } else { stream << "$"; }
	stream << ",";
	if( m_Purpose ) { m_Purpose->getStepParameter( stream ); } else { stream << "$"; }
	stream << ");";
}
void IFC4X3::IfcStructuralLoadGroup::getStepParameter( std::stringstream& stream, bool /*is_select_type*/ ) const { stream << "#" << m_tag; }
void IFC4X3::IfcStructuralLoadGroup::readStepArguments( const std::vector<std::string>& args, const std::map<int,shared_ptr<BuildingEntity> >& map, std::stringstream& errorStream )
{
	const size_t num_args = args.size();
	if( num_args != 10 ){ std::stringstream err; err << "Wrong parameter count for entity IfcStructuralLoadGroup, expecting 10, having " << num_args << ". Entity ID: " << m_tag << std::endl; throw BuildingException( err.str().c_str() ); }
	m_GlobalId = IfcGloballyUniqueId::createObjectFromSTEP( args[0], map, errorStream );
	readEntityReference( args[1], m_OwnerHistory, map, errorStream );
	m_Name = IfcLabel::createObjectFromSTEP( args[2], map, errorStream );
	m_Description = IfcText::createObjectFromSTEP( args[3], map, errorStream );
	m_ObjectType = IfcLabel::createObjectFromSTEP( args[4], map, errorStream );
	m_PredefinedType = IfcLoadGroupTypeEnum::createObjectFromSTEP( args[5], map, errorStream );
	m_ActionType = IfcActionTypeEnum::createObjectFromSTEP( args[6], map, errorStream );
	m_ActionSource = IfcActionSourceTypeEnum::createObjectFromSTEP( args[7], map, errorStream );
	m_Coefficient = IfcRatioMeasure::createObjectFromSTEP( args[8], map, errorStream );
	m_Purpose = IfcLabel::createObjectFromSTEP( args[9], map, errorStream );
}
void IFC4X3::IfcStructuralLoadGroup::getAttributes( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes ) const
{
	IFC4X3::IfcGroup::getAttributes( vec_attributes );
	vec_attributes.emplace_back( std::make_pair( "PredefinedType", m_PredefinedType ) );
	vec_attributes.emplace_back( std::make_pair( "ActionType", m_ActionType ) );
	vec_attributes.emplace_back( std::make_pair( "ActionSource", m_ActionSource ) );
	vec_attributes.emplace_back( std::make_pair( "Coefficient", m_Coefficient ) );
	vec_attributes.emplace_back( std::make_pair( "Purpose", m_Purpose ) );
}
void IFC4X3::IfcStructuralLoadGroup::getAttributesInverse( std::vector<std::pair<std::string, shared_ptr<BuildingObject> > >& vec_attributes_inverse ) const
{
	IFC4X3::IfcGroup::getAttributesInverse( vec_attributes_inverse );
	if( !m_SourceOfResultGroup_inverse.empty() )
	{
		shared_ptr<AttributeObjectVector> SourceOfResultGroup_inverse_vec_obj( new AttributeObjectVector() );
		for( size_t i=0; i<m_SourceOfResultGroup_inverse.size(); ++i )
		{
			if( !m_SourceOfResultGroup_inverse[i].expired() )
			{
				SourceOfResultGroup_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcStructuralResultGroup>( m_SourceOfResultGroup_inverse[i] ) );
			}
		}
		vec_attributes_inverse.emplace_back( std::make_pair( "SourceOfResultGroup_inverse", SourceOfResultGroup_inverse_vec_obj ) );
	}
	if( !m_LoadGroupFor_inverse.empty() )
	{
		shared_ptr<AttributeObjectVector> LoadGroupFor_inverse_vec_obj( new AttributeObjectVector() );
		for( size_t i=0; i<m_LoadGroupFor_inverse.size(); ++i )
		{
			if( !m_LoadGroupFor_inverse[i].expired() )
			{
				LoadGroupFor_inverse_vec_obj->m_vec.emplace_back( shared_ptr<IfcStructuralAnalysisModel>( m_LoadGroupFor_inverse[i] ) );
			}
		}
		vec_attributes_inverse.emplace_back( std::make_pair( "LoadGroupFor_inverse", LoadGroupFor_inverse_vec_obj ) );
	}
}
void IFC4X3::IfcStructuralLoadGroup::setInverseCounterparts( shared_ptr<BuildingEntity> ptr_self_entity )
{
	IfcGroup::setInverseCounterparts( ptr_self_entity );
}
void IFC4X3::IfcStructuralLoadGroup::unlinkFromInverseCounterparts()
{
	IfcGroup::unlinkFromInverseCounterparts();
}
